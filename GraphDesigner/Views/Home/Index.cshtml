@{
    ViewData["Title"] = "Home Page";
}

<style>
    .btn-circle {
        width: 30px;
        height: 30px;
        padding: 6px 0px;
        border-radius: 15px;
        text-align: center;
        font-size: 12px;
        line-height: 1.42857;
    }
</style>

<div class="container" id="mainContainer">
    <form method="post">
        <div class="row">
            <div class="col-md-5 offset-md-4">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="txtNodeName" placeholder="Node 1">
                    <label for="txtNodeName">Type a Node name</label>
                    <div class="valid-feedback d-block text-secondary"><em>Press 'ENTER' to add</em></div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-7 offset-md-3">
                <div class="row">
                    <div class="col">
                        <label for="startNodeSelect">Start Node(s)</label>
                        <select class="form-control" id="startNodeSelect" aria-label="Start Node(s)" multiple size="1">
                        </select>
                    </div>

                    <div class="col">
                        <label for="endNodeSelect">End Node</label>
                        <select class="form-control" id="endNodeSelect" aria-label="End Node" disabled>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mt-4">
            <div class="col-md-8 offset-md-5">
                <button type="button" class="btn btn-light">Connect Nodes selection</button>
            </div>
        </div>
        
        <div class="row mt-5">
            <div class="col-md-8 offset-md-3">
                <table class="table table-borderless">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Start</th>
                            <th scope="col"></th>
                            <th scope="col">Connects To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">1</th>
                            <td>
                                <button type="button" class="btn btn-primary btn-circle">
                                    A
                                </button>
                            </td>
                            <td>arrow</td>
                            <td>
                                <button type="button" class="btn btn-primary btn-circle">
                                    B
                                </button>
                                <button type="button" class="btn btn-primary btn-circle">
                                    C
                                </button>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">2</th>
                            <td>
                                <button type="button" class="btn btn-primary btn-circle">
                                    B
                                </button>
                            </td>
                            <td>arrow</td>
                            <td></td>
                        </tr>
                        <tr>
                            <th scope="row">3</th>
                            <td>
                                <button type="button" class="btn btn-primary btn-circle">
                                    C
                                </button>
                            </td>
                            <td>arrow</td>
                            <td></td>
                        </tr>
                    </tbody>

                </table>
            </div>
        </div>
    </form>
</div>


<script type="text/javascript" language="javascript">
    $(document).ready(function () {
        (function () {

            function GraphApi() {
                var self = this;
                var nodes = [];

                self.addNode = function(name) {
                    nodes.push(name);
                }

                self.getNodes = function() {
                    return nodes;
                }
            }

            function GraphDesigner() {
                var self = this;
                var $container = $("#mainContainer");
                var $txtNodeName = $container.find("#txtNodeName");
                var $startNodeSelect = $container.find("#startNodeSelect");
                var $endNodeSelect = $container.find("#endNodeSelect");
                var graphApi = new GraphApi();

                $("form").submit(function(e) {
                    e.preventDefault();
                });

                $startNodeSelect.on("change",
                    function () {
                        var nodeNamesArray = $(this).val();

                        populateEndNodesTag();
                        removeOptionFromSelectTag($endNodeSelect, nodeNamesArray);
                        $endNodeSelect.prop("disabled", false);

                        if (nodeNamesArray.length === graphApi.getNodes().length) {
                            $endNodeSelect.prop("disabled", true);
                        }
                    });

                $txtNodeName.on("keypress",
                    function (e) {
                        if (e.which === 13) {
                            graphApi.addNode($txtNodeName.val());
                            resetStartNodesSelection();
                            appendOptionToSelectTag($startNodeSelect, $txtNodeName.val());
                            increaseSelectTagHeight();
                            populateEndNodesTag();
                            resetTextInput();
                        }
                    });

                self.init = function() {
                    resetTextInput();
                }

                function resetStartNodesSelection() {
                    var id = $startNodeSelect.attr("id");
                    var selector = "#".concat(id).concat(" option:selected");
                    $(selector).prop("selected", false);
                }

                function removeOptionFromSelectTag($selectTag, nodeNames) {
                    var id = $selectTag.attr("id");
                    $.each(nodeNames, function(i, val) {
                        var selector = "#".concat(id).concat(" option[value='").concat(val).concat("']");
                        var $option = $container.find(selector);

                        if ($option) {
                            $option.remove();
                        }
                    });

                }

                function resetEndNodesTag() {
                    $endNodeSelect.empty();
                    $endNodeSelect.append($("<option>").val("-1").text(""));
                    $endNodeSelect.prop("disabled", true);
                }

                function populateEndNodesTag() {
                    var nodes = graphApi.getNodes();
                    var count = nodes.length;

                    if (count <= 1) {
                        return;
                    }
                    resetEndNodesTag();

                    $.each(nodes,
                        function (index, val) {
                            appendOptionToSelectTag($endNodeSelect, val);
                        });
                }

                function appendOptionToSelectTag($selectTag, text) {
                    var $newNode = $("<option>").val(text).text(text);
                    $selectTag.append($newNode);
                }

                function getNodesCount() {
                    //return $startNodeSelect.children("option").length;
                    return graphApi.getNodes().length;
                }

                function increaseSelectTagHeight() {
                    var startNodesCount = getNodesCount();

                    if (startNodesCount <= 10){
                        $startNodeSelect.attr("size", startNodesCount++);
                    }
                }

                function resetTextInput() {
                    $txtNodeName.val('');
                    $txtNodeName.focus();
                }
            }

            new GraphDesigner().init();

        })();

    });
</script>