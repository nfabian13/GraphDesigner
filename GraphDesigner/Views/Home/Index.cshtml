@{
    ViewData["Title"] = "Home Page";
}

<style>
    .btn-circle {
        width: 30px;
        height: 30px;
        padding: 6px 0px;
        border-radius: 15px;
        text-align: center;
        font-size: 12px;
        line-height: 1.42857;
    }

    #cy {
        height: 100%;
        width: 100%;
        display: block;
        border: solid;
        border-width: 1px;
        /*position: absolute;
        left: 0;
        top: 0;
        z-index: 999;*/
    }
</style>

<div class="container" id="mainContainer">
    <form method="post">
        <div class="row">
            <div class="col-md-5 offset-md-4">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="txtNodeName" placeholder="Node 1">
                    <label for="txtNodeName">Type a Node name</label>
                    <div class="valid-feedback d-block text-secondary"><em>Press 'ENTER' to add</em></div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-7 offset-md-3">
                <div class="row">
                    <div class="col">
                        <label for="startNodeSelect">Start Node(s)</label>
                        <select class="form-control" id="startNodeSelect" aria-label="Start Node(s)" multiple size="1">
                        </select>
                    </div>

                    <div class="col">
                        <label for="endNodeSelect">End Node</label>
                        <select class="form-control" id="endNodeSelect" aria-label="End Node" disabled>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-8 offset-md-5">
                <button id="btnConnectNodes" type="button" class="btn btn-secondary">Connect Nodes selection</button>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-md-5 offset-md-5">
                <table id="nodeConnectionsTable" class="table table-borderless caption-top">
                    <caption>Node's connection</caption>
                    <thead class="table-light">
                        <tr class="d-flex">
                            <th scope="col" class="col-1">#</th>
                            <th scope="col" class="col-2">Node</th>
                            <th scope="col" class="col-0"></th>
                            <th scope="col" class="col-4">Connects To</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* Data is populated dynamically *@
                    </tbody>

                </table>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-8 offset-md-5">
                <button id="btnCreateGraph" type="button" class="btn btn-secondary">Create Graph</button>
            </div>
        </div>


        <!-- Modal -->
        <div class="modal fade" id="graphModal" aria-hidden="true">
            <div class="modal-dialog modal-fullscreen">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">The Graph</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="cy">
                            @* The graph is drawn here *@
                        </div>
                    </div>
                    <div class="modal-footer">
                        <fieldset>
                            <label>Graph grade:</label> <span>5</span>
                            <label>Graph's grade sum:</label> <span>13</span>
                            <label>Graph's lowest grade:</label> <span>2</span>
                            <label>Has cycle?:</label> <span>true</span>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>


<script type="text/javascript" language="javascript">
    $(document).ready(function () {
        (function () {

            function GraphApi() {
                var self = this;
                var nodes = [];
                var edges = [];
                var idGenerator = 0;

                self.getGraph = function (successCb, errorCb) {
                    // TODO: construct the data shape that 'GetGraph' controller route acceppts: List<NodeModel> nodes, List<EdgeModel> edges
                    //var myData = {};

                    //$.ajax({
                    //    type: "POST",
                    //    url: "/GetGraph",
                    //    data: myData,
                    //    contentType: "application/json; charset=utf-8",
                    //    dataType: "json",
                    //    success: successCb,
                    //    error: errorCb
                    //});
                    setTimeout(successCb, 2000);
                }

                self.getTableData = function () {
                    var tableData = nodes.map(node => {
                        return {
                            startNode: node.name,
                            endNodes: edges.filter(x => x.startNodeId == node.id).map(e => nodes.filter(n => n.id == e.endNodeId).map(nn => nn.name))
                        };
                    });
                    return tableData;
                }

                self.addEdge = function (startNodeId, endNodeId) {
                    var edge = {
                        startNodeId,
                        endNodeId
                    };
                    edges.push(edge);
                }

                self.getEdges = function () {
                    return edges;
                }

                self.addNode = function (name) {
                    var newId = ++idGenerator;
                    nodes.push({ name, id: newId });

                    return newId;
                }

                self.getNodes = function () {
                    return nodes;
                }
            }

            function GraphDesigner() {
                var self = this;
                var $container = $("#mainContainer");
                var $txtNodeName = $container.find("#txtNodeName");
                var $startNodeSelect = $container.find("#startNodeSelect");
                var $endNodeSelect = $container.find("#endNodeSelect");
                var $btnConnectNodes = $container.find("#btnConnectNodes");
                var $table = $container.find("#nodeConnectionsTable");
                var $btnCreateGraph = $container.find("#btnCreateGraph");
                var $modal = $container.find("#graphModal");
                var graphApi = new GraphApi();
                var cy = cytoscape({
                    container: document.getElementById("cy"),
                    zoom: 1,
                    pan: { x: 300, y: 200 },
                    style: [
                        {
                            selector: 'node',
                            style: {
                                'label': 'data(id)'
                            }
                        }
                    ]
                });

                self.init = function () {
                    bindDOMEvents();
                    resetTextInput();
                }

                function bindDOMEvents() {
                    bindOnClickEvents();
                    bindModalShownEvent();
                    bindMiscEvents();
                }

                function bindMiscEvents() {
                    $("form").submit(function (e) {
                        e.preventDefault();
                    });

                    $startNodeSelect.on("change",
                        function () {
                            var nodeNamesArray = $(this).val();

                            populateEndNodesTag();
                            removeOptionFromSelectTag($endNodeSelect, nodeNamesArray);
                            $endNodeSelect.prop("disabled", false);

                            if (nodeNamesArray.length === graphApi.getNodes().length) {
                                $endNodeSelect.prop("disabled", true);
                            }
                        });

                    $txtNodeName.on("keypress",
                        function (e) {
                            if (e.which === 13) {
                                var val = $txtNodeName.val();
                                var exists = graphApi.getNodes().filter(x => x.name === val).length > 0;

                                if (exists) {
                                    alert("Duplicate node name!");
                                    return;
                                }

                                var newlyAddedNodeId = graphApi.addNode(val);

                                resetStartNodesSelection();
                                appendOptionToSelectTag($startNodeSelect, newlyAddedNodeId, val);
                                increaseSelectTagHeight();
                                populateEndNodesTag();
                                resetTextInput();
                            }
                        });

                }

                function bindModalShownEvent() {
                    $modal[0].addEventListener("shown.bs.modal",
                        function(event) {
                            var layout = cy.layout({
                                name: 'circle',
                                fit: true,
                                avoidOverlap: true
                            });
                            layout.run();
                        });
                }

                function showModal() {
                    var options = {
                        backdrop: "static",
                        focus: true
                    };
                    var myModal = new bootstrap.Modal($modal, options);
                    myModal.show();
                }

                function addElementsToCytoscapeGraph() {
                    cy.add([
                        { group: "nodes", data: { id: "a" }, position: { x: 100, y: 100 } },
                        { group: "nodes", data: { id: "b" }, position: { x: 200, y: 200 } },
                        { group: "nodes", data: { id: "c" }, position: { x: 300, y: 300 } },
                        { group: "nodes", data: { id: 'd' }, position: { x: 400, y: 400 } },
                        { group: "edges", data: { id: 'ab', source: 'a', target: 'b' } },
                        { group: "edges", data: { id: 'ac', source: 'a', target: 'c' } },
                        { group: "edges", data: { id: 'ad', source: 'a', target: 'd' } }
                    ]);
                }

                function bindOnClickEvents() {
                    $btnCreateGraph.on("click",
                        function () {
                            graphApi.getGraph(
                                function (response, textStatus, xhr) {
                                    addElementsToCytoscapeGraph();
                                    showModal();
                                },
                                function (xhr, textStatus, errorThrown) {
                                    // TODO: handle error and show this to the UI somehow
                                });
                        });

                    $btnConnectNodes.on("click",
                        function () {
                            var startNodesSelectedOptions = $startNodeSelect.children("option:selected").length ? $startNodeSelect.children("option:selected") : [];
                            var endNodeSelectedOption = $endNodeSelect.children("option:selected").length ? $endNodeSelect.children("option:selected")[0] : null;

                            if (!startNodesSelectedOptions || !startNodesSelectedOptions.length || !endNodeSelectedOption) {
                                alert("Nodes selection is invalid!");
                                return;
                            }

                            $.each(startNodesSelectedOptions,
                                function (index, opt) {
                                    //duplicate addEdge() call due to bidirectional edge addition
                                    graphApi.addEdge(parseInt(opt.value), parseInt(endNodeSelectedOption.value));
                                    graphApi.addEdge(parseInt(endNodeSelectedOption.value), parseInt(opt.value));
                                });

                            drawNodeConnectionsTable();
                        });
                }

                function drawNodeConnectionsTable() {
                    var $tbody = $table.children("tbody");
                    var data = graphApi.getTableData();

                    $tbody.empty();
                    $.each(data,
                        function (i, item) {
                            var $circle = $("<button>").addClass("btn btn-primary btn-circle");
                            var endNodesCircles = [];

                            item.endNodes.forEach(endNodeName => endNodesCircles.push($circle.addClass("me-1").text(endNodeName).prop("outerHTML")));
                            $("<tr>").addClass("d-flex").append(
                                $("<td>").addClass("col-1").text(i + 1),
                                $("<td>").addClass("col-2").append($circle.text(item.startNode)),
                                $("<td>").addClass("col-0").append("<i class='bi-arrow-right'></i>"),
                                $("<tr>").addClass("col-4").html(endNodesCircles.join("")))
                                .appendTo($tbody);
                        });
                }

                function resetStartNodesSelection() {
                    var id = $startNodeSelect.attr("id");
                    var selector = "#".concat(id).concat(" option:selected");
                    $(selector).prop("selected", false);
                }

                function removeOptionFromSelectTag($selectTag, nodeNames) {
                    var id = $selectTag.attr("id");
                    $.each(nodeNames, function (i, val) {
                        var selector = "#".concat(id).concat(" option[value='").concat(val).concat("']");
                        var $option = $container.find(selector);

                        if ($option) {
                            $option.remove();
                        }
                    });

                }

                function resetEndNodesTag() {
                    $endNodeSelect.empty();
                    //$endNodeSelect.append($("<option>").val("-1").text(""));
                    $endNodeSelect.prop("disabled", true);
                }

                function populateEndNodesTag() {
                    var nodes = graphApi.getNodes();
                    var count = nodes.length;

                    if (count <= 1) {
                        return;
                    }

                    resetEndNodesTag();

                    $.each(nodes,
                        function (index, node) {
                            appendOptionToSelectTag($endNodeSelect, node.id, node.name);
                        });
                }

                function appendOptionToSelectTag($selectTag, id, text) {
                    var $newNode = $("<option>").val(id).text(text);
                    $selectTag.append($newNode);
                }

                function getNodesCount() {
                    return graphApi.getNodes().length;
                }

                function increaseSelectTagHeight() {
                    var startNodesCount = getNodesCount();

                    if (startNodesCount <= 10) {
                        $startNodeSelect.attr("size", startNodesCount++);
                    }
                }

                function resetTextInput() {
                    $txtNodeName.val('');
                    $txtNodeName.focus();
                }
            }

            new GraphDesigner().init();

        })();

    });
</script>